// Code generated by MockGen. DO NOT EDIT.
// Source: entities/task.go

// Package mock_entities is a generated GoMock package.
package mock_entities

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/tonnytg/tasklist/entities"
)

// MockTaskInterface is a mock of TaskInterface interface.
type MockTaskInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskInterfaceMockRecorder
}

// MockTaskInterfaceMockRecorder is the mock recorder for MockTaskInterface.
type MockTaskInterfaceMockRecorder struct {
	mock *MockTaskInterface
}

// NewMockTaskInterface creates a new mock instance.
func NewMockTaskInterface(ctrl *gomock.Controller) *MockTaskInterface {
	mock := &MockTaskInterface{ctrl: ctrl}
	mock.recorder = &MockTaskInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskInterface) EXPECT() *MockTaskInterfaceMockRecorder {
	return m.recorder
}

// GetDescription mocks base method.
func (m *MockTaskInterface) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockTaskInterfaceMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockTaskInterface)(nil).GetDescription))
}

// GetHash mocks base method.
func (m *MockTaskInterface) GetHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockTaskInterfaceMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockTaskInterface)(nil).GetHash))
}

// GetID mocks base method.
func (m *MockTaskInterface) GetID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockTaskInterfaceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTaskInterface)(nil).GetID))
}

// GetIDString mocks base method.
func (m *MockTaskInterface) GetIDString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIDString indicates an expected call of GetIDString.
func (mr *MockTaskInterfaceMockRecorder) GetIDString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDString", reflect.TypeOf((*MockTaskInterface)(nil).GetIDString))
}

// GetName mocks base method.
func (m *MockTaskInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockTaskInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTaskInterface)(nil).GetName))
}

// GetStatus mocks base method.
func (m *MockTaskInterface) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockTaskInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockTaskInterface)(nil).GetStatus))
}

// SetDescription mocks base method.
func (m *MockTaskInterface) SetDescription(description string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDescription", description)
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockTaskInterfaceMockRecorder) SetDescription(description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockTaskInterface)(nil).SetDescription), description)
}

// SetID mocks base method.
func (m *MockTaskInterface) SetID(ID uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", ID)
}

// SetID indicates an expected call of SetID.
func (mr *MockTaskInterfaceMockRecorder) SetID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockTaskInterface)(nil).SetID), ID)
}

// SetName mocks base method.
func (m *MockTaskInterface) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockTaskInterfaceMockRecorder) SetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockTaskInterface)(nil).SetName), name)
}

// SetStatus mocks base method.
func (m *MockTaskInterface) SetStatus(status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", status)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockTaskInterfaceMockRecorder) SetStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockTaskInterface)(nil).SetStatus), status)
}

// MockTaskServiceInterface is a mock of TaskServiceInterface interface.
type MockTaskServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceInterfaceMockRecorder
}

// MockTaskServiceInterfaceMockRecorder is the mock recorder for MockTaskServiceInterface.
type MockTaskServiceInterfaceMockRecorder struct {
	mock *MockTaskServiceInterface
}

// NewMockTaskServiceInterface creates a new mock instance.
func NewMockTaskServiceInterface(ctrl *gomock.Controller) *MockTaskServiceInterface {
	mock := &MockTaskServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTaskServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceInterface) EXPECT() *MockTaskServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskServiceInterface) Create(name, description, status string) (entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, description, status)
	ret0, _ := ret[0].(entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceInterfaceMockRecorder) Create(name, description, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskServiceInterface)(nil).Create), name, description, status)
}

// Delete mocks base method.
func (m *MockTaskServiceInterface) Delete(ID uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceInterfaceMockRecorder) Delete(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskServiceInterface)(nil).Delete), ID)
}

// Get mocks base method.
func (m *MockTaskServiceInterface) Get(ID uint16) entities.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ID)
	ret0, _ := ret[0].(entities.Task)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTaskServiceInterfaceMockRecorder) Get(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskServiceInterface)(nil).Get), ID)
}

// Update mocks base method.
func (m *MockTaskServiceInterface) Update(ID uint16, name, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ID, name, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskServiceInterfaceMockRecorder) Update(ID, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskServiceInterface)(nil).Update), ID, name, description)
}

// MockTaskReader is a mock of TaskReader interface.
type MockTaskReader struct {
	ctrl     *gomock.Controller
	recorder *MockTaskReaderMockRecorder
}

// MockTaskReaderMockRecorder is the mock recorder for MockTaskReader.
type MockTaskReaderMockRecorder struct {
	mock *MockTaskReader
}

// NewMockTaskReader creates a new mock instance.
func NewMockTaskReader(ctrl *gomock.Controller) *MockTaskReader {
	mock := &MockTaskReader{ctrl: ctrl}
	mock.recorder = &MockTaskReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskReader) EXPECT() *MockTaskReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTaskReader) Get(ID uint16) (entities.TaskInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ID)
	ret0, _ := ret[0].(entities.TaskInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskReaderMockRecorder) Get(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskReader)(nil).Get), ID)
}

// MockTaskWriter is a mock of TaskWriter interface.
type MockTaskWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskWriterMockRecorder
}

// MockTaskWriterMockRecorder is the mock recorder for MockTaskWriter.
type MockTaskWriterMockRecorder struct {
	mock *MockTaskWriter
}

// NewMockTaskWriter creates a new mock instance.
func NewMockTaskWriter(ctrl *gomock.Controller) *MockTaskWriter {
	mock := &MockTaskWriter{ctrl: ctrl}
	mock.recorder = &MockTaskWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskWriter) EXPECT() *MockTaskWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockTaskWriter) Save(task entities.TaskInterface) (entities.TaskInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", task)
	ret0, _ := ret[0].(entities.TaskInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockTaskWriterMockRecorder) Save(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskWriter)(nil).Save), task)
}

// MockTaskPersistenceInterface is a mock of TaskPersistenceInterface interface.
type MockTaskPersistenceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskPersistenceInterfaceMockRecorder
}

// MockTaskPersistenceInterfaceMockRecorder is the mock recorder for MockTaskPersistenceInterface.
type MockTaskPersistenceInterfaceMockRecorder struct {
	mock *MockTaskPersistenceInterface
}

// NewMockTaskPersistenceInterface creates a new mock instance.
func NewMockTaskPersistenceInterface(ctrl *gomock.Controller) *MockTaskPersistenceInterface {
	mock := &MockTaskPersistenceInterface{ctrl: ctrl}
	mock.recorder = &MockTaskPersistenceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskPersistenceInterface) EXPECT() *MockTaskPersistenceInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTaskPersistenceInterface) Get(ID uint16) (entities.TaskInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ID)
	ret0, _ := ret[0].(entities.TaskInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskPersistenceInterfaceMockRecorder) Get(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskPersistenceInterface)(nil).Get), ID)
}

// Save mocks base method.
func (m *MockTaskPersistenceInterface) Save(task entities.TaskInterface) (entities.TaskInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", task)
	ret0, _ := ret[0].(entities.TaskInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockTaskPersistenceInterfaceMockRecorder) Save(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskPersistenceInterface)(nil).Save), task)
}
